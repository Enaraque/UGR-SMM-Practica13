/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica13sm;

import java.awt.Color;
import java.util.List;
import java.awt.Point;
import java.awt.Shape;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import static java.awt.color.ColorSpace.TYPE_RGB;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.EventListener;
import java.util.EventObject;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import sm.eae.imagen.PosterizarOp;
import sm.eae.imagen.RojoOp;
import sm.eae.imagen.TonoOp;
import sm.eae.iu.FormaActiva;
import sm.eae.iu.Lienzo2D;
import sm.eae.iu.LienzoAdapter;
import sm.eae.iu.LienzoEvent;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author enriquearaqueespinosa
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    private BufferedImage imgFuente = null;
    private boolean focus = false;
    private ManejadorVentanaInterna manejadorVentanaInterna = new ManejadorVentanaInterna();
    private ManejadorLienzo manejadorLienzo = new ManejadorLienzo();
    private SMClipPlayer player = null;
    private SMSoundRecorder recorder = null;

    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();       
        this.setSize(1400,800);
        lineaButton.setSelected(true);
        this.stateBarLabel.setText("LÃ­nea");
    }
    
    public Lienzo2D getLienzoSeleccionado() {
        VentanaInterna vi = (VentanaInterna)escritorio.getSelectedFrame();
        return vi!=null ? vi.getLienzo2D() : null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formButtonGroup = new javax.swing.ButtonGroup();
        colorButtonGroup = new javax.swing.ButtonGroup();
        formToolBar = new javax.swing.JToolBar();
        menuNuevoButton = new javax.swing.JButton();
        menuAbrirButton = new javax.swing.JButton();
        menuGuardarButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        trazoLibreButton = new javax.swing.JToggleButton();
        lineaButton = new javax.swing.JToggleButton();
        rectanguloButton = new javax.swing.JToggleButton();
        elipseButton = new javax.swing.JToggleButton();
        curvaButton = new javax.swing.JToggleButton();
        smileButton = new javax.swing.JToggleButton();
        seleccionButton = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        colorOptionPanel = new javax.swing.JPanel();
        blackButton = new javax.swing.JButton();
        redButton = new javax.swing.JButton();
        yellowButton = new javax.swing.JButton();
        blueButton = new javax.swing.JButton();
        greenButton = new javax.swing.JButton();
        elegirColorLabel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        rellenarButton = new javax.swing.JToggleButton();
        transparenciaButton = new javax.swing.JToggleButton();
        alisarButton = new javax.swing.JToggleButton();
        grosorSpinner = new javax.swing.JSpinner();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        listaReproduccion = new javax.swing.JComboBox<>();
        grabarButton = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        tratarImagenToolBar = new javax.swing.JToolBar();
        brilloPanel = new javax.swing.JPanel();
        brilloSlider = new javax.swing.JSlider();
        contrasteSlider = new javax.swing.JSlider();
        filtrosPanel = new javax.swing.JPanel();
        seleccionMascara = new javax.swing.JComboBox<>();
        transformacionesPanel = new javax.swing.JPanel();
        t_contrasteButton = new javax.swing.JButton();
        t_iluminarButton = new javax.swing.JButton();
        t_oscurecerButton = new javax.swing.JButton();
        t_cuadraticaButton = new javax.swing.JButton();
        t_linealButton = new javax.swing.JButton();
        t_sliderPanel = new javax.swing.JPanel();
        splineA = new javax.swing.JSlider();
        splineB = new javax.swing.JSlider();
        rotYescPanel = new javax.swing.JPanel();
        rye_rotacionButton = new javax.swing.JButton();
        rye_aumentarButton = new javax.swing.JButton();
        rye_disminuirButton = new javax.swing.JButton();
        bandasColorPanel = new javax.swing.JPanel();
        bandasButton = new javax.swing.JButton();
        seleccionBandas = new javax.swing.JComboBox<>();
        combinacionBandasPanel = new javax.swing.JPanel();
        combBandasButton = new javax.swing.JButton();
        tintarButton = new javax.swing.JButton();
        sepiaButton = new javax.swing.JButton();
        ecualizarButton = new javax.swing.JButton();
        rojoImagenButton = new javax.swing.JButton();
        posterizarSlider = new javax.swing.JSlider();
        cambiarTonoSlider = new javax.swing.JSlider();
        stateAndCoordPanel = new javax.swing.JPanel();
        stateBarPanel = new javax.swing.JPanel();
        stateBarLabel = new javax.swing.JLabel();
        coordPanel = new javax.swing.JPanel();
        coordLabel = new javax.swing.JLabel();
        uselessPanel2 = new javax.swing.JPanel();
        uselessPanel1 = new javax.swing.JPanel();
        escritorioSplitPane = new javax.swing.JSplitPane();
        escritorio = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        listaFigurasScrollPane = new javax.swing.JScrollPane();
        listaFiguras = new javax.swing.JList<Shape>();
        volcadoPanel = new javax.swing.JPanel();
        volcarButon = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        archivoMenu = new javax.swing.JMenu();
        menuArchivoNuevo = new javax.swing.JMenuItem();
        menuArchivoAbrir = new javax.swing.JMenuItem();
        menuAudioAbrir = new javax.swing.JMenuItem();
        menuArchivoGuardar = new javax.swing.JMenuItem();
        menuImagen = new javax.swing.JMenu();
        bandCombineItem = new javax.swing.JMenuItem();
        colorConvertOpItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(868, 492));

        formToolBar.setBackground(new java.awt.Color(153, 153, 153));
        formToolBar.setBorder(null);
        formToolBar.setRollover(true);
        formToolBar.setPreferredSize(new java.awt.Dimension(100, 40));

        menuNuevoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/nuevo.png"))); // NOI18N
        menuNuevoButton.setFocusable(false);
        menuNuevoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuNuevoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuNuevoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoButtonActionPerformed(evt);
            }
        });
        formToolBar.add(menuNuevoButton);

        menuAbrirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/abrir.png"))); // NOI18N
        menuAbrirButton.setFocusable(false);
        menuAbrirButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuAbrirButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuAbrirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirButtonActionPerformed(evt);
            }
        });
        formToolBar.add(menuAbrirButton);

        menuGuardarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/guardar.png"))); // NOI18N
        menuGuardarButton.setFocusable(false);
        menuGuardarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuGuardarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuGuardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarButtonActionPerformed(evt);
            }
        });
        formToolBar.add(menuGuardarButton);
        formToolBar.add(jSeparator1);

        formButtonGroup.add(trazoLibreButton);
        trazoLibreButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/trazo.png"))); // NOI18N
        trazoLibreButton.setFocusable(false);
        trazoLibreButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        trazoLibreButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        trazoLibreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trazoLibreButtonActionPerformed(evt);
            }
        });
        formToolBar.add(trazoLibreButton);

        formButtonGroup.add(lineaButton);
        lineaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/linea.png"))); // NOI18N
        lineaButton.setFocusable(false);
        lineaButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineaButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaButtonActionPerformed(evt);
            }
        });
        formToolBar.add(lineaButton);

        formButtonGroup.add(rectanguloButton);
        rectanguloButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rectangulo.png"))); // NOI18N
        rectanguloButton.setFocusable(false);
        rectanguloButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectanguloButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectanguloButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloButtonActionPerformed(evt);
            }
        });
        formToolBar.add(rectanguloButton);

        formButtonGroup.add(elipseButton);
        elipseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/elipse.png"))); // NOI18N
        elipseButton.setFocusable(false);
        elipseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        elipseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        elipseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elipseButtonActionPerformed(evt);
            }
        });
        formToolBar.add(elipseButton);

        formButtonGroup.add(curvaButton);
        curvaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/curva.png"))); // NOI18N
        curvaButton.setFocusable(false);
        curvaButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        curvaButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        curvaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curvaButtonActionPerformed(evt);
            }
        });
        formToolBar.add(curvaButton);

        formButtonGroup.add(smileButton);
        smileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/smile.png"))); // NOI18N
        smileButton.setFocusable(false);
        smileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        smileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        smileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smileButtonActionPerformed(evt);
            }
        });
        formToolBar.add(smileButton);

        formButtonGroup.add(seleccionButton);
        seleccionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/seleccion.png"))); // NOI18N
        seleccionButton.setFocusable(false);
        seleccionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        seleccionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        seleccionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionButtonActionPerformed(evt);
            }
        });
        formToolBar.add(seleccionButton);
        formToolBar.add(jSeparator2);

        colorOptionPanel.setMaximumSize(new java.awt.Dimension(100, 60));
        colorOptionPanel.setMinimumSize(new java.awt.Dimension(100, 50));
        colorOptionPanel.setPreferredSize(new java.awt.Dimension(35, 30));
        colorOptionPanel.setLayout(new java.awt.GridLayout(2, 3, 1, 0));

        blackButton.setBackground(new java.awt.Color(0, 0, 0));
        colorButtonGroup.add(blackButton);
        blackButton.setMaximumSize(new java.awt.Dimension(23, 23));
        blackButton.setMinimumSize(new java.awt.Dimension(23, 23));
        blackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackButtonActionPerformed(evt);
            }
        });
        colorOptionPanel.add(blackButton);

        redButton.setBackground(new java.awt.Color(255, 0, 0));
        colorButtonGroup.add(redButton);
        redButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redButtonActionPerformed(evt);
            }
        });
        colorOptionPanel.add(redButton);

        yellowButton.setBackground(new java.awt.Color(255, 255, 0));
        yellowButton.setForeground(new java.awt.Color(255, 255, 0));
        colorButtonGroup.add(yellowButton);
        yellowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowButtonActionPerformed(evt);
            }
        });
        colorOptionPanel.add(yellowButton);

        blueButton.setBackground(new java.awt.Color(0, 0, 255));
        colorButtonGroup.add(blueButton);
        blueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueButtonActionPerformed(evt);
            }
        });
        colorOptionPanel.add(blueButton);

        greenButton.setBackground(new java.awt.Color(0, 255, 0));
        colorButtonGroup.add(greenButton);
        greenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenButtonActionPerformed(evt);
            }
        });
        colorOptionPanel.add(greenButton);

        elegirColorLabel.setText("+");
        elegirColorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                elegirColorLabelMouseClicked(evt);
            }
        });
        colorOptionPanel.add(elegirColorLabel);

        formToolBar.add(colorOptionPanel);
        formToolBar.add(jSeparator3);

        rellenarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rellenar.png"))); // NOI18N
        rellenarButton.setFocusable(false);
        rellenarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rellenarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rellenarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenarButtonActionPerformed(evt);
            }
        });
        formToolBar.add(rellenarButton);

        transparenciaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/transparencia.png"))); // NOI18N
        transparenciaButton.setFocusable(false);
        transparenciaButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparenciaButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparenciaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparenciaButtonActionPerformed(evt);
            }
        });
        formToolBar.add(transparenciaButton);

        alisarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/alisar.png"))); // NOI18N
        alisarButton.setFocusable(false);
        alisarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisarButtonActionPerformed(evt);
            }
        });
        formToolBar.add(alisarButton);

        grosorSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        grosorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorSpinnerStateChanged(evt);
            }
        });
        formToolBar.add(grosorSpinner);
        formToolBar.add(jSeparator4);

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/play24x24.png"))); // NOI18N
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        formToolBar.add(playButton);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/stop24x24.png"))); // NOI18N
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        formToolBar.add(stopButton);

        listaReproduccion.setModel(new javax.swing.DefaultComboBoxModel<>(new File[] {}));
        formToolBar.add(listaReproduccion);

        grabarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/record24x24.png"))); // NOI18N
        grabarButton.setFocusable(false);
        grabarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        grabarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        grabarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarButtonActionPerformed(evt);
            }
        });
        formToolBar.add(grabarButton);

        getContentPane().add(formToolBar, java.awt.BorderLayout.PAGE_START);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusPanel.setMinimumSize(new java.awt.Dimension(350, 500));
        statusPanel.setPreferredSize(new java.awt.Dimension(900, 130));
        statusPanel.setLayout(new java.awt.BorderLayout());

        tratarImagenToolBar.setRollover(true);
        tratarImagenToolBar.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tratarImagenToolBar.setMinimumSize(new java.awt.Dimension(150, 300));
        tratarImagenToolBar.setPreferredSize(new java.awt.Dimension(500, 300));

        brilloPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo y Contraste"));
        brilloPanel.setMinimumSize(new java.awt.Dimension(82, 50));
        brilloPanel.setLayout(new java.awt.GridBagLayout());

        brilloSlider.setMaximum(255);
        brilloSlider.setMinimum(-255);
        brilloSlider.setValue(0);
        brilloSlider.setMaximumSize(new java.awt.Dimension(400, 20));
        brilloSlider.setPreferredSize(new java.awt.Dimension(100, 20));
        brilloSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloSliderStateChanged(evt);
            }
        });
        brilloSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloSliderFocusLost(evt);
            }
        });
        brilloPanel.add(brilloSlider, new java.awt.GridBagConstraints());

        contrasteSlider.setMaximum(20);
        contrasteSlider.setValue(10);
        contrasteSlider.setPreferredSize(new java.awt.Dimension(100, 20));
        contrasteSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrasteSliderStateChanged(evt);
            }
        });
        contrasteSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                contrasteSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                contrasteSliderFocusLost(evt);
            }
        });
        brilloPanel.add(contrasteSlider, new java.awt.GridBagConstraints());

        tratarImagenToolBar.add(brilloPanel);

        filtrosPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros"));

        seleccionMascara.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media 3x3", "Media 5x5", "Media 7x7", "Binomial", "Enfoque", "Relieve", "Fronteras", "Emb.H 5x1", "Emb.H 7x1", "Emb.H 10x1" }));
        seleccionMascara.setToolTipText("");
        seleccionMascara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionMascaraActionPerformed(evt);
            }
        });
        filtrosPanel.add(seleccionMascara);

        tratarImagenToolBar.add(filtrosPanel);

        transformacionesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Transformaciones"));
        transformacionesPanel.setPreferredSize(new java.awt.Dimension(300, 75));
        transformacionesPanel.setRequestFocusEnabled(false);
        transformacionesPanel.setLayout(new java.awt.GridLayout(1, 0));

        t_contrasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/contraste.png"))); // NOI18N
        t_contrasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_contrasteButtonActionPerformed(evt);
            }
        });
        transformacionesPanel.add(t_contrasteButton);

        t_iluminarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iluminar.png"))); // NOI18N
        t_iluminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_iluminarButtonActionPerformed(evt);
            }
        });
        transformacionesPanel.add(t_iluminarButton);

        t_oscurecerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/oscurecer.png"))); // NOI18N
        t_oscurecerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_oscurecerButtonActionPerformed(evt);
            }
        });
        transformacionesPanel.add(t_oscurecerButton);

        t_cuadraticaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cuadratica.png"))); // NOI18N
        t_cuadraticaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_cuadraticaButtonActionPerformed(evt);
            }
        });
        transformacionesPanel.add(t_cuadraticaButton);

        t_linealButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lineal.png"))); // NOI18N
        t_linealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_linealButtonActionPerformed(evt);
            }
        });
        transformacionesPanel.add(t_linealButton);

        t_sliderPanel.setPreferredSize(new java.awt.Dimension(290, 68));
        t_sliderPanel.setSize(new java.awt.Dimension(200, 100));
        t_sliderPanel.setLayout(new java.awt.GridLayout(2, 0));

        splineA.setMaximum(255);
        splineA.setValue(128);
        splineA.setEnabled(false);
        splineA.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                splineAStateChanged(evt);
            }
        });
        t_sliderPanel.add(splineA);

        splineB.setMaximum(255);
        splineB.setValue(128);
        splineB.setEnabled(false);
        splineB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                splineBStateChanged(evt);
            }
        });
        t_sliderPanel.add(splineB);

        transformacionesPanel.add(t_sliderPanel);

        tratarImagenToolBar.add(transformacionesPanel);

        rotYescPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("RotaciÃ³n y escalado"));
        rotYescPanel.setPreferredSize(new java.awt.Dimension(140, 75));
        rotYescPanel.setLayout(new java.awt.GridLayout(1, 0));

        rye_rotacionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rotacion180.png"))); // NOI18N
        rye_rotacionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rye_rotacionButtonActionPerformed(evt);
            }
        });
        rotYescPanel.add(rye_rotacionButton);

        rye_aumentarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/aumentar.png"))); // NOI18N
        rye_aumentarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rye_aumentarButtonActionPerformed(evt);
            }
        });
        rotYescPanel.add(rye_aumentarButton);

        rye_disminuirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/disminuir.png"))); // NOI18N
        rye_disminuirButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rye_disminuirButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rye_disminuirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rye_disminuirButtonActionPerformed(evt);
            }
        });
        rotYescPanel.add(rye_disminuirButton);

        tratarImagenToolBar.add(rotYescPanel);

        bandasColorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));
        bandasColorPanel.setPreferredSize(new java.awt.Dimension(145, 75));
        bandasColorPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, -5));

        bandasButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bandas.png"))); // NOI18N
        bandasButton.setPreferredSize(new java.awt.Dimension(40, 40));
        bandasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandasButtonActionPerformed(evt);
            }
        });
        bandasColorPanel.add(bandasButton);

        seleccionBandas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        seleccionBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionBandasActionPerformed(evt);
            }
        });
        bandasColorPanel.add(seleccionBandas);

        tratarImagenToolBar.add(bandasColorPanel);

        combinacionBandasPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("   "));
        combinacionBandasPanel.setPreferredSize(new java.awt.Dimension(370, 75));
        combinacionBandasPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, -5));

        combBandasButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/combinar.png"))); // NOI18N
        combBandasButton.setPreferredSize(new java.awt.Dimension(40, 40));
        combBandasButton.setRequestFocusEnabled(false);
        combBandasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combBandasButtonActionPerformed(evt);
            }
        });
        combinacionBandasPanel.add(combBandasButton);

        tintarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/tintar.png"))); // NOI18N
        tintarButton.setPreferredSize(new java.awt.Dimension(40, 40));
        tintarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tintarButtonActionPerformed(evt);
            }
        });
        combinacionBandasPanel.add(tintarButton);

        sepiaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sepia.png"))); // NOI18N
        sepiaButton.setPreferredSize(new java.awt.Dimension(40, 40));
        sepiaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaButtonActionPerformed(evt);
            }
        });
        combinacionBandasPanel.add(sepiaButton);

        ecualizarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ecualizar.png"))); // NOI18N
        ecualizarButton.setPreferredSize(new java.awt.Dimension(40, 40));
        ecualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecualizarButtonActionPerformed(evt);
            }
        });
        combinacionBandasPanel.add(ecualizarButton);

        rojoImagenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rojo.png"))); // NOI18N
        rojoImagenButton.setPreferredSize(new java.awt.Dimension(40, 40));
        rojoImagenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rojoImagenButtonActionPerformed(evt);
            }
        });
        combinacionBandasPanel.add(rojoImagenButton);

        posterizarSlider.setMaximum(20);
        posterizarSlider.setMinimum(2);
        posterizarSlider.setValue(10);
        posterizarSlider.setPreferredSize(new java.awt.Dimension(50, 20));
        posterizarSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                posterizarSliderStateChanged(evt);
            }
        });
        posterizarSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                posterizarSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                posterizarSliderFocusLost(evt);
            }
        });
        combinacionBandasPanel.add(posterizarSlider);

        cambiarTonoSlider.setMaximum(360);
        cambiarTonoSlider.setValue(180);
        cambiarTonoSlider.setPreferredSize(new java.awt.Dimension(50, 20));
        cambiarTonoSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cambiarTonoSliderStateChanged(evt);
            }
        });
        cambiarTonoSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cambiarTonoSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cambiarTonoSliderFocusLost(evt);
            }
        });
        combinacionBandasPanel.add(cambiarTonoSlider);

        tratarImagenToolBar.add(combinacionBandasPanel);

        statusPanel.add(tratarImagenToolBar, java.awt.BorderLayout.CENTER);

        stateAndCoordPanel.setBackground(new java.awt.Color(204, 204, 204));
        stateAndCoordPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        stateAndCoordPanel.setPreferredSize(new java.awt.Dimension(880, 35));
        stateAndCoordPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        stateBarPanel.setBackground(new java.awt.Color(204, 204, 204));
        stateBarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Forma", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 0, 8), new java.awt.Color(0, 0, 0))); // NOI18N
        stateBarPanel.setMaximumSize(new java.awt.Dimension(32767, 31));
        stateBarPanel.setPreferredSize(new java.awt.Dimension(120, 30));
        stateBarPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, -3));

        stateBarLabel.setForeground(new java.awt.Color(0, 0, 0));
        stateBarLabel.setText("Barra de Estado");
        stateBarPanel.add(stateBarLabel);

        stateAndCoordPanel.add(stateBarPanel);

        coordPanel.setBackground(new java.awt.Color(204, 204, 204));
        coordPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Coordenadas - RGB", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 0, 8), new java.awt.Color(0, 0, 0))); // NOI18N
        coordPanel.setPreferredSize(new java.awt.Dimension(300, 30));
        coordPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, -4));

        coordLabel.setForeground(new java.awt.Color(0, 0, 0));
        coordLabel.setText("[0.0, 0.0] - (255, 255, 255) ");
        coordPanel.add(coordLabel);

        stateAndCoordPanel.add(coordPanel);

        statusPanel.add(stateAndCoordPanel, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(statusPanel, java.awt.BorderLayout.PAGE_END);

        uselessPanel2.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout uselessPanel2Layout = new javax.swing.GroupLayout(uselessPanel2);
        uselessPanel2.setLayout(uselessPanel2Layout);
        uselessPanel2Layout.setHorizontalGroup(
            uselessPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        uselessPanel2Layout.setVerticalGroup(
            uselessPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );

        getContentPane().add(uselessPanel2, java.awt.BorderLayout.LINE_END);

        uselessPanel1.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout uselessPanel1Layout = new javax.swing.GroupLayout(uselessPanel1);
        uselessPanel1.setLayout(uselessPanel1Layout);
        uselessPanel1Layout.setHorizontalGroup(
            uselessPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        uselessPanel1Layout.setVerticalGroup(
            uselessPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );

        getContentPane().add(uselessPanel1, java.awt.BorderLayout.LINE_START);

        escritorioSplitPane.setDividerLocation(1200);
        escritorioSplitPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 894, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );

        escritorioSplitPane.setLeftComponent(escritorio);

        jPanel1.setLayout(new java.awt.BorderLayout());

        listaFiguras.setModel(new DefaultListModel());
        listaFigurasScrollPane.setViewportView(listaFiguras);

        jPanel1.add(listaFigurasScrollPane, java.awt.BorderLayout.CENTER);

        volcadoPanel.setMaximumSize(new java.awt.Dimension(32767, 50));
        volcadoPanel.setPreferredSize(new java.awt.Dimension(129, 40));
        volcadoPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 3));

        volcarButon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/volcar.png"))); // NOI18N
        volcarButon.setMaximumSize(new java.awt.Dimension(15, 15));
        volcarButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volcarButonActionPerformed(evt);
            }
        });
        volcadoPanel.add(volcarButon);

        jPanel1.add(volcadoPanel, java.awt.BorderLayout.PAGE_END);
        volcadoPanel.getAccessibleContext().setAccessibleDescription("");

        escritorioSplitPane.setRightComponent(jPanel1);

        getContentPane().add(escritorioSplitPane, java.awt.BorderLayout.CENTER);

        archivoMenu.setText("Archivo");

        menuArchivoNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/nuevo.png"))); // NOI18N
        menuArchivoNuevo.setText("Nuevo");
        menuArchivoNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArchivoNuevoActionPerformed(evt);
            }
        });
        archivoMenu.add(menuArchivoNuevo);

        menuArchivoAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/abrir.png"))); // NOI18N
        menuArchivoAbrir.setText("Abrir");
        menuArchivoAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArchivoAbrirActionPerformed(evt);
            }
        });
        archivoMenu.add(menuArchivoAbrir);

        menuAudioAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/openAudio24x24.png"))); // NOI18N
        menuAudioAbrir.setText("Abrir Audio");
        menuAudioAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAudioAbrirActionPerformed(evt);
            }
        });
        archivoMenu.add(menuAudioAbrir);

        menuArchivoGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/guardar.png"))); // NOI18N
        menuArchivoGuardar.setText("Guardar");
        menuArchivoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArchivoGuardarActionPerformed(evt);
            }
        });
        archivoMenu.add(menuArchivoGuardar);

        menuBar.add(archivoMenu);

        menuImagen.setText("Imagen");

        bandCombineItem.setText("Operador BandCombineOp");
        bandCombineItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandCombineItemActionPerformed(evt);
            }
        });
        menuImagen.add(bandCombineItem);

        colorConvertOpItem.setText("Operador ColorConvertOp");
        colorConvertOpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorConvertOpItemActionPerformed(evt);
            }
        });
        menuImagen.add(colorConvertOpItem);

        menuBar.add(menuImagen);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void blackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackButtonActionPerformed
        getLienzoSeleccionado().setColor(Color.black);
        this.repaint();
    }//GEN-LAST:event_blackButtonActionPerformed

    private void redButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redButtonActionPerformed
        getLienzoSeleccionado().setColor(Color.red);
        this.repaint();
    }//GEN-LAST:event_redButtonActionPerformed

    private void blueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueButtonActionPerformed
        getLienzoSeleccionado().setColor(Color.blue);
        this.repaint();
    }//GEN-LAST:event_blueButtonActionPerformed

    private void yellowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yellowButtonActionPerformed
        getLienzoSeleccionado().setColor(Color.yellow);
        this.repaint();
    }//GEN-LAST:event_yellowButtonActionPerformed

    private void greenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenButtonActionPerformed
        getLienzoSeleccionado().setColor(Color.green);
        this.repaint();
    }//GEN-LAST:event_greenButtonActionPerformed

    private void menuArchivoAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArchivoAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.addInternalFrameListener(manejadorVentanaInterna);
                vi.getLienzo2D().addLienzoListener(manejadorLienzo);
                vi.getLienzo2D().setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch(Exception ex) {
                System.err.println("Error al leer la imagen");
            } 
        }
    }//GEN-LAST:event_menuArchivoAbrirActionPerformed

    private void menuArchivoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArchivoGuardarActionPerformed
        VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_menuArchivoGuardarActionPerformed

    private void menuArchivoNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArchivoNuevoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        vi.addInternalFrameListener(manejadorVentanaInterna);
        vi.getLienzo2D().addLienzoListener(manejadorLienzo);
        BufferedImage img;
        img = new BufferedImage(400,400,BufferedImage.TYPE_INT_RGB);
        vi.getLienzo2D().setDefaultImage(img);
    }//GEN-LAST:event_menuArchivoNuevoActionPerformed

    private void rellenarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenarButtonActionPerformed
        getLienzoSeleccionado().setRelleno(rellenarButton.isSelected());
        this.repaint();
    }//GEN-LAST:event_rellenarButtonActionPerformed

    private void seleccionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionButtonActionPerformed
        this.stateBarLabel.setText("SelecciÃ³n");
        getLienzoSeleccionado().setMover(seleccionButton.isSelected());       
    }//GEN-LAST:event_seleccionButtonActionPerformed

    private void lineaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaButtonActionPerformed
        getLienzoSeleccionado().setMover(seleccionButton.isSelected());
        getLienzoSeleccionado().setFormaActiva(FormaActiva.LINEA);
    }//GEN-LAST:event_lineaButtonActionPerformed

    private void rectanguloButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloButtonActionPerformed
    getLienzoSeleccionado().setMover(seleccionButton.isSelected());
        getLienzoSeleccionado().setFormaActiva(FormaActiva.RECTANGULO);
    }//GEN-LAST:event_rectanguloButtonActionPerformed

    private void elipseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elipseButtonActionPerformed
        getLienzoSeleccionado().setMover(seleccionButton.isSelected());
        getLienzoSeleccionado().setFormaActiva(FormaActiva.ELIPSE);
    }//GEN-LAST:event_elipseButtonActionPerformed

    private void elegirColorLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elegirColorLabelMouseClicked
        Color color = JColorChooser.showDialog(this, "Elije un color", Color.RED);
        getLienzoSeleccionado().setColor(color);
        this.repaint();
    }//GEN-LAST:event_elegirColorLabelMouseClicked

    private void trazoLibreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trazoLibreButtonActionPerformed
        getLienzoSeleccionado().setMover(seleccionButton.isSelected());
        getLienzoSeleccionado().setFormaActiva(FormaActiva.TRAZO);
    }//GEN-LAST:event_trazoLibreButtonActionPerformed

    private void curvaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curvaButtonActionPerformed
        getLienzoSeleccionado().setMover(seleccionButton.isSelected());
        getLienzoSeleccionado().setFormaActiva(FormaActiva.CURVA);
    }//GEN-LAST:event_curvaButtonActionPerformed

    private void transparenciaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparenciaButtonActionPerformed
        getLienzoSeleccionado().setTransparencia(transparenciaButton.isSelected());
        this.repaint();
    }//GEN-LAST:event_transparenciaButtonActionPerformed

    private void alisarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisarButtonActionPerformed
        getLienzoSeleccionado().setRenderizado(alisarButton.isSelected());
        this.repaint();
    }//GEN-LAST:event_alisarButtonActionPerformed

    private void grosorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorSpinnerStateChanged
        getLienzoSeleccionado().setGrosor((int)grosorSpinner.getValue());
        this.repaint();
    }//GEN-LAST:event_grosorSpinnerStateChanged

    private void smileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smileButtonActionPerformed
        this.stateBarLabel.setText("Smile");
        getLienzoSeleccionado().setMover(seleccionButton.isSelected());
        getLienzoSeleccionado().setFormaActiva(FormaActiva.SMILE);
    }//GEN-LAST:event_smileButtonActionPerformed

    private void menuGuardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarButtonActionPerformed
        VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_menuGuardarButtonActionPerformed

    private void menuAbrirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirButtonActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.addInternalFrameListener(manejadorVentanaInterna);
                vi.getLienzo2D().addLienzoListener(manejadorLienzo);
            vi.getLienzo2D().setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch(Exception ex) {
                System.err.println("Error al leer la imagen");
            } 
        }
    }//GEN-LAST:event_menuAbrirButtonActionPerformed

    private void menuNuevoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoButtonActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.addInternalFrameListener(manejadorVentanaInterna);
        vi.getLienzo2D().addLienzoListener(manejadorLienzo);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(400,400,BufferedImage.TYPE_INT_RGB);
        vi.getLienzo2D().setDefaultImage(img);
    }//GEN-LAST:event_menuNuevoButtonActionPerformed

    private void brilloSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    int brillo = this.brilloSlider.getValue();
                    RescaleOp rop = new RescaleOp(1.0F, brillo, null);
                    rop.filter(imgFuente, img);
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_brilloSliderStateChanged

    private void contrasteSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrasteSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if(img!=null && imgFuente != null) {
                try {
                    float contraste = this.contrasteSlider.getValue();
                    RescaleOp rop = new RescaleOp(contraste/10, 0, null);
                    rop.filter(imgFuente, img);
                    this.escritorio.repaint();
                } catch(IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrasteSliderStateChanged
    
    private void focusGained() {
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }
    private void brilloSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusGained
        focusGained();
    }//GEN-LAST:event_brilloSliderFocusGained

    private void brilloSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusLost
        imgFuente = null;
        this.brilloSlider.setValue(0);
    }//GEN-LAST:event_brilloSliderFocusLost

    private void contrasteSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteSliderFocusGained
        focusGained();
    }//GEN-LAST:event_contrasteSliderFocusGained

    private void contrasteSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteSliderFocusLost
        imgFuente = null;
        this.contrasteSlider.setValue(10);
    }//GEN-LAST:event_contrasteSliderFocusLost

    private void seleccionMascaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionMascaraActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            
            Kernel k = getKernel(this.seleccionMascara.getSelectedIndex());
            if(img!=null && k!=null) {
                try { 
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_seleccionMascaraActionPerformed
    
    private void combinarBandas(float[][] matriz) {
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {  
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    private void bandCombineItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandCombineItemActionPerformed
        float[][] matriz = {{1.0F, 0.0F, 0.0F},
                            {0.0F, 0.0F, 1.0F},
                            {0.0F, 1.0F, 0.0F}};
        combinarBandas(matriz);
    }//GEN-LAST:event_bandCombineItemActionPerformed

    private void colorConvertOpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorConvertOpItemActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    ColorSpace cs = new sm.image.color.GreyColorSpace();
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();

                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_colorConvertOpItemActionPerformed
    
    private LookupTable cuadratica(double m, double pronunciada) {
        double xi = 0;
        if (m < 128)
            xi = 255;
        
        double max = (1/pronunciada)*(Math.pow((xi-m),2));
        double k = 255/max;
        
        byte lt[] = new byte[256];
        for(int x = 0; x < 256; x++) {
            lt[x] = (byte) (k*((1.0/pronunciada)*(Math.pow(((float)x-m),2))));
        }

        ByteLookupTable slt = new ByteLookupTable(0,lt);
        return slt;
    }
    
    private LookupTable splineLineal(float a, float b) {
        double m = 0;
        if (a != 255)
            m = (255-b)/(255-a);
        
        byte lt[] = new byte[256];
        for (int x = 0; x < 256; x++) {
            if (x < a)
                lt[x] = (byte)((b/a)*x);
            else
                lt[x] = (byte)(m*(x-a)+b);      
        }
        
        ByteLookupTable slt = new ByteLookupTable(0,lt);
        return slt;
    }
    
    private void aplicarContraste(int funcion) {
        aplicarContraste(funcion, -1, -1);
    }
    private void aplicarContraste(int funcion, float a, float b) {
        int type = -1;
        switch (funcion) {
            case 1: // contraste
                type = LookupTableProducer.TYPE_SFUNCION;
                break;
            case 2: // iluminar
                type = LookupTableProducer.TYPE_LOGARITHM;
                break;
            case 3: //oscurecer
                type = LookupTableProducer.TYPE_POWER;
                break;
            
        }
        
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    LookupTable lt = null;
                    if (funcion > 0 && funcion <= 3)
                        lt = LookupTableProducer.createLookupTable(type);
                    else if (funcion == 4)
                        lt = cuadratica(140.0, 100);
                    else if (funcion == 5) 
                        lt = splineLineal(a, b);
                    
                    LookupOp lop = new LookupOp(lt, null);
                    if (funcion == 5 && imgFuente != null)
                        lop.filter(imgFuente, img);
                    else
                        lop.filter(img, img); // Imagen origen y destino iguales 
                    
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }                      
    }
    
    private void aplicarEscRot(int tipo) {
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    AffineTransform at = null;
                    if (tipo == 0){ // rotar
                        double r = Math.toRadians(180);
                        Point c = new Point(img.getWidth() / 2, img.getHeight() / 2);
                        at = AffineTransform.getRotateInstance(r, c.x, c.y);               
                    }                       
                    else if (tipo == 1) { //aumentar 
                        at = AffineTransform.getScaleInstance(1.6, 1.6);
                    }
                    else if (tipo == 2) { //disminuir
                        at = AffineTransform.getScaleInstance(0.625,0.625);
                    }
                    
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    private void t_cuadraticaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_cuadraticaButtonActionPerformed
        aplicarContraste(4);
    }//GEN-LAST:event_t_cuadraticaButtonActionPerformed

    private void t_contrasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_contrasteButtonActionPerformed
        aplicarContraste(1);
    }//GEN-LAST:event_t_contrasteButtonActionPerformed

    private void t_iluminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_iluminarButtonActionPerformed
        aplicarContraste(2);
    }//GEN-LAST:event_t_iluminarButtonActionPerformed

    private void t_oscurecerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_oscurecerButtonActionPerformed
        aplicarContraste(3);
    }//GEN-LAST:event_t_oscurecerButtonActionPerformed

    private void rye_rotacionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rye_rotacionButtonActionPerformed
        aplicarEscRot(0);
    }//GEN-LAST:event_rye_rotacionButtonActionPerformed

    private void rye_aumentarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rye_aumentarButtonActionPerformed
        aplicarEscRot(1);
    }//GEN-LAST:event_rye_aumentarButtonActionPerformed

    private void rye_disminuirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rye_disminuirButtonActionPerformed
        aplicarEscRot(2);
    }//GEN-LAST:event_rye_disminuirButtonActionPerformed

    private void splineAStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_splineAStateChanged
        aplicarContraste(5, splineA.getValue(), splineB.getValue());
    }//GEN-LAST:event_splineAStateChanged

    private void splineBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_splineBStateChanged
        aplicarContraste(5, splineA.getValue(), splineB.getValue());
    }//GEN-LAST:event_splineBStateChanged

    private void t_linealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_linealButtonActionPerformed
        if (focus) {
            focus = false;
            imgFuente = null;
            splineA.setValue(128);
            splineB.setValue(128);
            splineA.setEnabled(false);
            splineB.setEnabled(false);
        }          
        else {
            focus = true;
            splineA.setEnabled(true);
            splineB.setEnabled(true);
            focusGained();
        }   
    }//GEN-LAST:event_t_linealButtonActionPerformed

    private void volcarButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volcarButonActionPerformed
        int[] indices = listaFiguras.getSelectedIndices();
        List<Integer> listaTemporal = Arrays.stream(indices).boxed().collect(Collectors.toList());
        ArrayList<Integer> listaIndices = new ArrayList<>(listaTemporal);        
       
        for (int i = 0; i < listaIndices.size(); i++) {           
            // Hay que tener en cuenta que tenemos que eliminar el elemento xi - i donde
            // i lo podemos representar como el numero actual de elementos eliminados.
            ((DefaultListModel) listaFiguras.getModel()).removeElementAt(listaIndices.get(i) - i);           
        }
        
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        vi.getLienzo2D().volcado(listaIndices);
    }//GEN-LAST:event_volcarButonActionPerformed

    private void combBandasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combBandasButtonActionPerformed
        float[][] matriz = {{0.0F, 0.5F, 0.5F},
                            {0.5F, 0.0F, 0.5F},
                            {0.5F, 0.5F, 0.0F}};
        combinarBandas(matriz);
    }//GEN-LAST:event_combBandasButtonActionPerformed

    private String seleccionarNombreBanda(String tipo, int banda) {
        String title = "";
        switch (tipo) {
            case ("[RGB]"):
            default:
                if (banda == 0)
                    title = "RGB - RED";
                else if (banda == 1)
                    title = "RBG - GREEN";
                else
                    title = "RGB - BLUE";
                break;
            case ("[YCC]"):
                if (banda == 0)
                    title = "YCC - Y";
                else if (banda == 1)
                    title = "YCC - Cb";
                else
                    title = "YCC - Cr";
                break;
            case ("[GREY]"):
                title = "GREY - Y";
                break;             
        }
        
        return title;
    }
    
    private void bandasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandasButtonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            String title = vi.getTitle(); // Para saber que tipo es (RGB, YCC o GREY)
            if (img != null) {
                for (int i = 0; i < img.getRaster().getNumBands(); i++) {
                    BufferedImage imgBanda = getImageBand(img, i);
                    vi = new VentanaInterna();
                    vi.getLienzo2D().setImage(imgBanda);
                    //AÃ±adir el titulo con la banda que corresponda
                    vi.setTitle(seleccionarNombreBanda(title, i)); 
                    escritorio.add(vi);
                    vi.setVisible(true);
                
                }
            }
        }
    }//GEN-LAST:event_bandasButtonActionPerformed

    private void seleccionBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionBandasActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                ColorSpace cs = null;
                String title = "";
                int seleccion = this.seleccionBandas.getSelectedIndex();
                switch (seleccion) {
                    case 0:
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                        title = "[RGB]";
                        break;              
                    case 1:
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                        title = "[YCC]";
                        break;
                    case 2:
                        cs = new sm.image.color.GreyColorSpace();
                        title = "[GREY]";
                        break;
                }
                
                
                try {
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi = new VentanaInterna();
                    
                    vi.setTitle(title);
                    vi.getLienzo2D().setImage(imgdest);
                    escritorio.add(vi);
                    vi.setVisible(true);


                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_seleccionBandasActionPerformed
    
    private void setEfecto(String efecto) {
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    if (efecto == "tintado") {
                        TintOp tintado = new TintOp(vi.getLienzo2D().getColor(),0.2f);
                        tintado.filter(img,img);
                    }
                    else if (efecto == "sepia"){
                        SepiaOp sepia = new SepiaOp();
                        sepia.filter(img,img);
                    }
                    else if (efecto == "ecualizar") {
                        EqualizationOp ecualizacion = new EqualizationOp();
                        ecualizacion.filter(img,img);
                    }
                    else if (efecto == "posterizar" && imgFuente != null) {
                        PosterizarOp posterizar = new PosterizarOp(posterizarSlider.getValue());                   
                        posterizar.filter(imgFuente, img);
                    }
                    else if (efecto == "rojo") {
                        RojoOp rojo = new RojoOp(30);
                        rojo.filter(img,img);
                    }
                    else if (efecto == "tono" && imgFuente != null) {
                        TonoOp tono = new TonoOp(cambiarTonoSlider.getValue());
                        tono.filter(imgFuente, img);
                    }
                    
                    vi.getLienzo2D().setImage(img);
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }  
    }
    
    private void tintarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tintarButtonActionPerformed
        setEfecto("tintado");
    }//GEN-LAST:event_tintarButtonActionPerformed

    private void sepiaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaButtonActionPerformed
        setEfecto("sepia");
    }//GEN-LAST:event_sepiaButtonActionPerformed

    private void ecualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecualizarButtonActionPerformed
        setEfecto("ecualizar");
    }//GEN-LAST:event_ecualizarButtonActionPerformed

    private void posterizarSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_posterizarSliderStateChanged
        setEfecto("posterizar");
    }//GEN-LAST:event_posterizarSliderStateChanged

    private void posterizarSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterizarSliderFocusGained
        focusGained();
    }//GEN-LAST:event_posterizarSliderFocusGained

    private void posterizarSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterizarSliderFocusLost
        imgFuente = null;
        posterizarSlider.setValue(10);
    }//GEN-LAST:event_posterizarSliderFocusLost

    private void rojoImagenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rojoImagenButtonActionPerformed
        setEfecto("rojo");
    }//GEN-LAST:event_rojoImagenButtonActionPerformed

    private void cambiarTonoSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cambiarTonoSliderStateChanged
        setEfecto("tono");
    }//GEN-LAST:event_cambiarTonoSliderStateChanged

    private void cambiarTonoSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cambiarTonoSliderFocusGained
        focusGained();
    }//GEN-LAST:event_cambiarTonoSliderFocusGained

    private void cambiarTonoSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cambiarTonoSliderFocusLost
        imgFuente = null;
        cambiarTonoSlider.setValue(180);
    }//GEN-LAST:event_cambiarTonoSliderFocusLost

    private void menuAudioAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAudioAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {
                        return this.getName();
                    }
                }; 
                
                this.listaReproduccion.addItem(f);
                this.listaReproduccion.setSelectedItem(f);
            } catch(Exception ex) {
                System.err.println("Error al leer el audio");
            } 
        }
    }//GEN-LAST:event_menuAudioAbrirActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        File f = (File)listaReproduccion.getSelectedItem();
        if (f != null) {
            player = new SMClipPlayer(f);
            if (player != null) {
                player.addLineListener(new ManejadorAudio());
                player.play();
            }
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (player != null) {
            player.stop();
            player = null;
        }   
        
        if (recorder != null) {
            recorder.stop();
            recorder = null;
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void grabarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarButtonActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                recorder = new SMSoundRecorder(f);
                if(recorder != null) {
                    recorder.record();
                } 
            } catch(Exception ex) {
                System.err.println("Error a guardar sonido");
            } 
        }

    }//GEN-LAST:event_grabarButtonActionPerformed
    
    private BufferedImage getImageBand(BufferedImage img, int banda) {
        //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
        ColorSpace cs = new sm.image.color.GreyColorSpace();
        ComponentColorModel cm = new ComponentColorModel(cs, false, false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);
        //Creamos el nuevo raster a partir del raster de la imagen original
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0,img.getWidth(), img.getHeight(), 0, 0, vband);
        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        return new BufferedImage(cm, bRaster, false, null);
    }

    private Kernel getKernel(int seleccion) {
        Kernel k = null;
        
        switch (seleccion) {
            case 0:
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                float mask[] = KernelProducer.MASCARA_MEDIA_3x3;                        
                break;
            case 1:
                float filtroMedia_5x5[] = { 0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                                            0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                                            0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                                            0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                                            0.04f, 0.04f, 0.04f, 0.04f, 0.04f };                                  
                k = new Kernel(5, 5, filtroMedia_5x5);
                break;
            case 2:
                float filtroMedia_7x7[] = { 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                            0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                            0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                            0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                            0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                            0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                            0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f };                                  
                k = new Kernel(7, 7, filtroMedia_7x7);
                break;
            case 3:
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
            case 4:
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
            case 5:
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
            case 6:
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
            case 7:
                float filtroEmbHorizontal_5x1[] = {0.2f, 0.2f, 0.2f, 0.2f, 0.2f};
                k = new Kernel(5, 1, filtroEmbHorizontal_5x1);
                break;
            case 8:
                float filtroEmbHorizontal_7x1[] = {0.1429f, 0.1429f, 0.1429f, 0.1429f, 0.1429f, 0.1429f, 0.1429f};
                k = new Kernel(7, 1, filtroEmbHorizontal_7x1);
                break;
            case 9:
                float filtroEmbHorizontal_10x1[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 
                                                    0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
                k = new Kernel(10, 1, filtroEmbHorizontal_10x1);
                break;    
        }
        
        return k;
    }
    
    
    private class ManejadorVentanaInterna extends InternalFrameAdapter {
        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            VentanaInterna vi = (VentanaInterna)evt.getInternalFrame();
            
            rellenarButton.setSelected(vi.getLienzo2D().isRelleno());
            transparenciaButton.setSelected(vi.getLienzo2D().isTransparencia());
            alisarButton.setSelected(vi.getLienzo2D().isRenderizado());
            grosorSpinner.setValue(vi.getLienzo2D().getGrosor());
            
            String str = vi.getLienzo2D().getFormaActiva().toString();
            stateBarLabel.setText(str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase());
            
            FormaActiva formaActiva = vi.getLienzo2D().getFormaActiva();
            formButtonGroup.clearSelection();           
            switch (formaActiva) {
                case LINEA:
                    lineaButton.setSelected(true);                    
                    break;
                case RECTANGULO:
                    rectanguloButton.setSelected(true);
                    break;
                case ELIPSE:
                    elipseButton.setSelected(true);
                    break;
                case TRAZO:
                    trazoLibreButton.setSelected(true);
                    break;
                case CURVA:
                    curvaButton.setSelected(true);
                    break;
                case SMILE:
                    smileButton.setSelected(true);
                    break;
            }
            seleccionButton.setSelected(vi.getLienzo2D().isMover());
            
            ((DefaultListModel) listaFiguras.getModel()).removeAllElements();
            
            ArrayList<Shape> arrayShape = vi.getLienzo2D().getShapeList(); 
            for (Shape s : arrayShape) {
               ((DefaultListModel) listaFiguras.getModel()).addElement(s);
            }  
            
            if (focus) {
            focus = false;
            imgFuente = null;
            splineA.setValue(128);
            splineB.setValue(128);
            splineA.setEnabled(false);
            splineB.setEnabled(false);
            }     

        }
        
        public void internalFrameClosing(InternalFrameEvent evt) {
            ((DefaultListModel) listaFiguras.getModel()).removeAllElements();
        }
        
    }

    public class ManejadorLienzo extends LienzoAdapter {
              
        public void shapeAdded(LienzoEvent evt) {
            Shape s = evt.getForma();                
            ((DefaultListModel) listaFiguras.getModel()).addElement(s);
        }
        
        public void shapeChange(LienzoEvent evt) {
            String str = evt.getFormaActiva().toString();
            stateBarLabel.setText(str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase());
        }
        
        public void propertyChange(LienzoEvent evt) {
            coordLabel.setText("[" + evt.getX() + ", " + evt.getY() + "] - " + 
                            "(" + evt.getRGB().getRed() + ", " + evt.getRGB().getGreen() + ", " 
                                + evt.getRGB().getBlue() + ")");
        }
        
        
    }
    
    class ManejadorAudio implements LineListener {

        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                playButton.setEnabled (false);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                playButton.setEnabled (true);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton alisarButton;
    private javax.swing.JMenu archivoMenu;
    private javax.swing.JMenuItem bandCombineItem;
    private javax.swing.JButton bandasButton;
    private javax.swing.JPanel bandasColorPanel;
    private javax.swing.JButton blackButton;
    private javax.swing.JButton blueButton;
    private javax.swing.JPanel brilloPanel;
    private javax.swing.JSlider brilloSlider;
    private javax.swing.JSlider cambiarTonoSlider;
    private javax.swing.ButtonGroup colorButtonGroup;
    private javax.swing.JMenuItem colorConvertOpItem;
    private javax.swing.JPanel colorOptionPanel;
    private javax.swing.JButton combBandasButton;
    private javax.swing.JPanel combinacionBandasPanel;
    private javax.swing.JSlider contrasteSlider;
    public javax.swing.JLabel coordLabel;
    private javax.swing.JPanel coordPanel;
    private javax.swing.JToggleButton curvaButton;
    private javax.swing.JButton ecualizarButton;
    private javax.swing.JLabel elegirColorLabel;
    private javax.swing.JToggleButton elipseButton;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JSplitPane escritorioSplitPane;
    private javax.swing.JPanel filtrosPanel;
    private javax.swing.ButtonGroup formButtonGroup;
    private javax.swing.JToolBar formToolBar;
    private javax.swing.JButton grabarButton;
    private javax.swing.JButton greenButton;
    private javax.swing.JSpinner grosorSpinner;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToggleButton lineaButton;
    private javax.swing.JList<Shape> listaFiguras;
    private javax.swing.JScrollPane listaFigurasScrollPane;
    private javax.swing.JComboBox<File> listaReproduccion;
    private javax.swing.JButton menuAbrirButton;
    private javax.swing.JMenuItem menuArchivoAbrir;
    private javax.swing.JMenuItem menuArchivoGuardar;
    private javax.swing.JMenuItem menuArchivoNuevo;
    private javax.swing.JMenuItem menuAudioAbrir;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton menuGuardarButton;
    private javax.swing.JMenu menuImagen;
    private javax.swing.JButton menuNuevoButton;
    private javax.swing.JButton playButton;
    private javax.swing.JSlider posterizarSlider;
    private javax.swing.JToggleButton rectanguloButton;
    private javax.swing.JButton redButton;
    private javax.swing.JToggleButton rellenarButton;
    private javax.swing.JButton rojoImagenButton;
    private javax.swing.JPanel rotYescPanel;
    private javax.swing.JButton rye_aumentarButton;
    private javax.swing.JButton rye_disminuirButton;
    private javax.swing.JButton rye_rotacionButton;
    private javax.swing.JComboBox<String> seleccionBandas;
    private javax.swing.JToggleButton seleccionButton;
    private javax.swing.JComboBox<String> seleccionMascara;
    private javax.swing.JButton sepiaButton;
    private javax.swing.JToggleButton smileButton;
    private javax.swing.JSlider splineA;
    private javax.swing.JSlider splineB;
    private javax.swing.JPanel stateAndCoordPanel;
    private javax.swing.JLabel stateBarLabel;
    private javax.swing.JPanel stateBarPanel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton t_contrasteButton;
    private javax.swing.JButton t_cuadraticaButton;
    private javax.swing.JButton t_iluminarButton;
    private javax.swing.JButton t_linealButton;
    private javax.swing.JButton t_oscurecerButton;
    private javax.swing.JPanel t_sliderPanel;
    private javax.swing.JButton tintarButton;
    private javax.swing.JPanel transformacionesPanel;
    private javax.swing.JToggleButton transparenciaButton;
    private javax.swing.JToolBar tratarImagenToolBar;
    private javax.swing.JToggleButton trazoLibreButton;
    private javax.swing.JPanel uselessPanel1;
    private javax.swing.JPanel uselessPanel2;
    private javax.swing.JPanel volcadoPanel;
    private javax.swing.JButton volcarButon;
    private javax.swing.JButton yellowButton;
    // End of variables declaration//GEN-END:variables
}
